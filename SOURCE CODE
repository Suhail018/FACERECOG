import cv2
import face_recognition

# Initialize lists to store known face encodings and names
known_face_encodings = []
known_face_names = []

# Load and encode known images
known_person1_image = face_recognition.load_image_file("C:/Users/suhai/OneDrive/Documents/Messi Pics Hd.jpg")
known_person2_image = face_recognition.load_image_file("C:/Users/suhai/OneDrive/Documents/viratkohli.jpg")
known_person3_image = face_recognition.load_image_file("C:/Users/suhai/OneDrive/Documents/shahrukh.jpg")

# Get face encodings for the known images
known_face_encodings.append(face_recognition.face_encodings(known_person1_image)[0])
known_face_encodings.append(face_recognition.face_encodings(known_person2_image)[0])
known_face_encodings.append(face_recognition.face_encodings(known_person3_image)[0])

# Add names corresponding to the known faces
known_face_names.append("MESSI")
known_face_names.append("VIRAT")
known_face_names.append("SHAH RUKH")

# Start video capture
video_capture = cv2.VideoCapture(0)

while True:
    ret, frame = video_capture.read()
    if not ret:
        print("Failed to capture video")
        break

    # Find all face locations and encodings in the current frame
    face_locations = face_recognition.face_locations(frame)
    face_encodings = face_recognition.face_encodings(frame, face_locations)

    for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
        # Compare face encodings with known faces
        matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
        name = "Unknown"

        # If a match is found, get the corresponding name
        if True in matches:
            first_match_index = matches.index(True)
            name = known_face_names[first_match_index]
        
        # Draw a rectangle around the detected face
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)
        cv2.putText(frame, name, (left, top - 10), cv2.FONT_HERSHEY_COMPLEX, 0.9, (0, 0, 255), 2)

    # Display the resulting frame
    cv2.imshow("Video", frame)

    # Break the loop on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture object and close windows
video_capture.release()
cv2.destroyAllWindows()

